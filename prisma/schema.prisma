generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  BLOCKED
  PRO
}

enum MoneyStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id          String        @id @default(uuid()) @map("_id")
  email       String        @unique
  name        String        @unique
  number      String        @unique
  password    String
  totalMoney  Int           @default(0)
  role        UserRole      @default(USER)
  createdAt   DateTime      @default(now()) @map("created_at")
  money       Money[]
  Order       Order[]
  Asset       Asset[]
  News        News[]
  ProUser     ProUser[]
  Feedback    Feedback[]
  BankDetails BankDetails[]
  WalletFlow  WalletFlow[]
  Support     Support[]
}

model BankDetails {
  id             String   @id @default(uuid()) @map("_id")
  public_id      String   @unique
  secure_url     String
  upiid          String
  upinumber      String
  accountDetails String
  ifsccode       String
  accountType    String
  name           String
  bankName       String
  role           UserRole @default(ADMIN)
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now()) @map("created_at")
}

model ProUser {
  id           String  @id @default(uuid()) @map("_id")
  amount_limit Int
  assets       Json
  proRecharge  Boolean @default(false)
  isRecharged  Boolean @default(false)
  User         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @unique
}

model Money {
  id            String      @id @default(uuid()) @map("_id")
  name          String
  amount        String?
  upiid         String
  accountNumber String?
  transactionId String      @unique
  public_id     String      @unique
  secure_url    String
  reason        String?
  status        MoneyStatus @default(PENDING)
  User          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime    @default(now()) @map("created_at")
}

model WalletFlow {
  id        String   @id @default(uuid()) @map("_id")
  moneyId   String   @unique
  userId    String
  user      User?    @relation(fields: [userId], references: [id])
  amount    Int
  purpose   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
}

model Support {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  link      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
}

model Asset {
  id          String   @id @default(uuid()) @map("_id")
  userId      String?
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assetName   String   @unique
  description String
  price       Int
  minAsset    Int
  maxAsset    Int
  stock       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt
  orderId     String?
}

model Order {
  id        String      @id @default(uuid()) @map("_id")
  orderId   String      @unique
  name      String
  userId    String
  User      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets    Json
  files     Json?
  amount    Int
  reason    String?
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt
}

model Feedback {
  id               String   @id @default(uuid()) @map("_id")
  orderId          String   @unique
  feedback         String
  reply            String?
  userId           String?
  public_id        String?  @unique
  secure_url       String?
  fileName         String?
  reply_fileName   String?
  reply_public_id  String?
  reply_secure_url String?
  replyStatus      Boolean  @default(false)
  User             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt
}

model News {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}
